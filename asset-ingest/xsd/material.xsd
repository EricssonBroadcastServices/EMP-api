<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://video-metadata.emp.ebsd.ericsson.net/material/v1"
			  xmlns:common="http://video-metadata.emp.ebsd.ericsson.net/common/v1"
			  targetNamespace="http://video-metadata.emp.ebsd.ericsson.net/material/v1" version="1.0">
	<xs:import namespace="http://video-metadata.emp.ebsd.ericsson.net/common/v1" schemaLocation="common.xsd" />
	<!-- -->
	<xs:element name="material" type="materialType">
		<xs:annotation>
			<xs:documentation>Root element for material object. Material </xs:documentation>
		</xs:annotation>
	</xs:element>
	<!-- -->
	<xs:complexType name="materialType">
		<xs:sequence>
			<xs:element name="id" type="common:idType">
				<xs:annotation>
					<xs:documentation>
						This is used to couple material with an event. This id should be matched from materialIdRef in events.
						Usually is a version-key from Louise. Not clear yet if it could be anything else than a version-key.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="materialRef" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						url string value is an id, uri, url file path or any other reference to the media file.
						Depends on the context. 
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="contentIdRef" type="common:idType" minOccurs="0"> 
				<xs:annotation>
					<xs:documentation>
						No use at the moment but could be used for clips or such at a later date. 
						If we would start to send clips from louise or metabank that are not scheduled in louise, we would have material for the clip (videoformat, resolution etc) but we would not have an event to connect the material to. 
						So we need this element to connect the clip (or ad, or something else that does not have a scheduled event) to a content.

						Say we have highlights from a UFC fight or an Idol episode, we have (at least) two usecases:
						1: It is a clip from a recent episode that we want to use to promote watching of the episode on our VOD platform.
						In this case we could reference the scheduled event instead of the content, however..

						2: If it is an old clip from a publication event that has expired but we want to use it to promote a new season. Then we need to be able to connect it to a content/season/brand instead as we would not have an event to connect it to.  
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="duration" type="xs:int" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The duration of the material in frames or millisecs.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="framerate" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						If applicable, framerate for the material in fps
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int" />
				</xs:simpleType>
			</xs:element>
			<xs:element name="breakList" type="breakListType" minOccurs="0">
     			<xs:annotation>
       				<xs:documentation>
         				List of breaks for the media
       				</xs:documentation>
     			</xs:annotation>
   			</xs:element>
			<xs:element name="subtitleList" type="subtitleListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available subtitles</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="expiryDate" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Expiry date for licensing, if no date then default used
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="purgeDate" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Media would be purged, if no date then default used 
					</xs:documentation>
				</xs:annotation>
			</xs:element>	
			<xs:element name="additionalProperties" type="common:propertyListType" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- TODO: Need to add a RFA flag to Subtitles as well? -->
	<xs:complexType name="subtitleListType">
		<xs:sequence>
			<xs:element name="subtitle" type="subtitleType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						reference to a subtitle item, for example a teletext page or a subtitle file
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="subtitleType">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="language" type="xs:language">
					<xs:annotation>
						<xs:documentation>code in ISO 639-1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="subtitleFormatType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="closed" />
			<!-- text-tv text -->
			<xs:enumeration value="open" />
			<xs:enumeration value="openAndTeletext" />
			<xs:enumeration value="teletext" />
			<xs:enumeration value="dvbText" />
			<xs:enumeration value="other" />
			<xs:enumeration value="N/A" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="mediaListType">
		<xs:sequence>
			<xs:element name="media" type="mediaType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="materialReferenceTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="video" />
			<xs:enumeration value="audio" />
			<xs:enumeration value="subtitle" />
			<xs:enumeration value="graphics" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="mediaType">
		<xs:sequence>
			
			<xs:element name="subtitleList" type="subtitleListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available subtitles</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="rfa" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>
						"Ready For Airing": This flag will be set to true if the media has been checked by QC (Quality Control).
						If this flag is not set to true it means that the file is not yet availble.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="materialRightsListType">
		<xs:sequence>
			<xs:element name="rights" type="materialRightsType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="materialRightsType">
		<xs:annotation>
			<xs:documentation>DateTime in UTC</xs:documentation>
		</xs:annotation>
		<xs:sequence>
		
			<xs:element name="validFrom" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Start of period where right is valid
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="validTo" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>End of period where right is valid
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="materialListType">
		<xs:annotation>
			<xs:documentation>
				This is used for better readability in higher nodes. 
				I.e instead of having a sequence of materialTypes in the publishType, just add an element with this type.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="material" type="materialType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="breakListType">
   <xs:sequence>
     <xs:element name="break" type="breakType" minOccurs="0" maxOccurs="unbounded"/>
   </xs:sequence>
 </xs:complexType>

 <xs:complexType name="breakType">
   <xs:sequence>
   <xs:annotation>
			<xs:documentation>
				Use the same unit in offset as in duration
			</xs:documentation>
		</xs:annotation>
     <xs:element name="offset" type="xs:long" minOccurs="1"/>
   </xs:sequence>
 </xs:complexType>
 
</xs:schema>

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://video-metadata.tv4.se/event/v1" xmlns:common="http://video-metadata.tv4.se/common/v1"
	targetNamespace="http://video-metadata.tv4.se/event/v1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0"
>
	<xs:import namespace="http://video-metadata.tv4.se/common/v1" schemaLocation="common.xsd" />

	<!--  -->
	<xs:element name="event" type="eventType">
		<xs:annotation>
			<xs:documentation>root node of event</xs:documentation>
		</xs:annotation>
	</xs:element>
	<!-- types -->
	<xs:complexType name="basicEventType">
		<xs:annotation>
			<xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="id" type="common:idType">
				<xs:annotation>
					<xs:documentation>
						This is the eventId from the scheduled event in louise.
						Should start with provider name, for example 'se.tv4.123456'
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="channelId" type="common:idType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						id for the current service or channel, could be for example 'se.tv4.tv4play'.
						This specefies the 
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="deviceType" type="common:deviceTypeType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if null, then generic and valid for all
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="priceGroup" type="priceGroupType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if null, then generic and valid for all
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<!-- Why publications rights? We should only send publication events -->
			<xs:element name="publicationRights" type="publicationRightsType">
			</xs:element>

			<!-- Description on events? -->
			<xs:element name="descriptionList" type="descriptionListLangType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						List of descriptions for the event...
					<!-- TODO John : what is the use / requirement for this? -->
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="rerun" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>indicates if this is a rerun, the rules for decision could is set by the provider and could be different between providers
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="live" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>indicates if this event is live.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="hidden" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>indicates if this event is hidden, i.e. if it should not be public.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="groupId" type="eventGroupType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>If the event have natural many parts mark them with the same groupId, for instance a soccer game that have two halfs.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="timeList" type="timeListType" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="embeddedEventType">
		<xs:annotation>
			<xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="basicEventType">
				<xs:sequence>
					<xs:element name="contentIdRef" type="xs:string">
						<xs:annotation>
							<xs:documentation>Reference to contentId for this event for convenience as this could be obtained via materialIdRef. Warning. This id is
								redundant as the material also points out the content! They should be verified to be the same.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="materialIdRef" type="xs:string">
						<xs:annotation>
							<xs:documentation>reference to contentId for this event
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="eventType">
		<xs:complexContent>
			<xs:extension base="embeddedEventType">
				<xs:sequence>
					<xs:element name="embeddedEventList" type="embeddedEventType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>list of events that occurs as part of current event.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="timestamp" type="xs:dateTime" use="required">
					<xs:annotation>
						<xs:documentation>Timestamp when document is created
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="publicationRightsType">
		<xs:complexContent>
			<xs:extension base="common:rightsType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="priceGroupType">
		<xs:annotation>
			<xs:documentation>Tag identifying the priceGroup of the material. id = ppv1 -> 45 SEK, 40 NOK, 4 EU, id = ppv2 -> ...
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\w+"></xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	<!-- remove? -->
	<xs:complexType name="embeddedEventListType">
		<xs:sequence>
			<xs:element name="event" type="embeddedEventType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="basicEventListType">
		<xs:sequence>
			<xs:element name="event" type="basicEventType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- remove? -->
	<xs:complexType name="eventListType">
		<xs:annotation>
			<xs:documentation>
				This is used for better readability in higher nodes. 
				I.e instead of having a sequence of eventTypes in the publishType, just add an element with this type.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="event" type="eventType" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="descriptionListLangType">
		<xs:sequence>
			<xs:element name="description" type="common:description" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="eventGroupType">
		<xs:annotation>
			<xs:documentation> The element value is the name of the group. The sequenceNumber attribute gives the order in which the events should been viewed,
				if not given implicitly by the time.
			</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="sequenceNumber" type="xs:short">
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="timecode">
		<xs:annotation>
			<xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:complexType name="timeListType">
		<xs:sequence>
			<xs:element name="time" type="timeType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="timeType">
		<xs:sequence>
			<xs:element name="startTime" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Time when program starts or vod is possible to start play.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="endTime" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Time when program ends or vod is no longer possible to play.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="publishTime" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Time when the program/vod information can be exposed to the customer. Vod can not be played until startTime. If publish is
						after start or empty (nil), then publishTime = startTime.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="duration" type="timecode" minOccurs="0" />
		</xs:sequence>

		<!-- Should maybe be minOccurs 0 or removed completly -->
		<xs:attribute name="type" type="timeSchedulingType" default="public" />
	</xs:complexType>
	<xs:simpleType name="timeSchedulingType">
		<xs:annotation>
			<xs:documentation> 
				Planned = the exact planned time E.g. 19:57.45. N.b., exact time is unknown as long as the time is in the future. Public = The
				time to use in an EPG. Usually rounded to the nearest previous "5 minut period", e.g. 19:55.00
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="public" />
			<xs:enumeration value="planned" />
		</xs:restriction>
	</xs:simpleType>
</xs:schema>

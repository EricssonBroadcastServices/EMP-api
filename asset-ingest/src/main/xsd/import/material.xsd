<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://video-metadata.tv4.se/material/v1"
			  xmlns:common="http://video-metadata.tv4.se/common/v1"
			  targetNamespace="http://video-metadata.tv4.se/material/v1" version="1.0">
	<xs:import namespace="http://video-metadata.tv4.se/common/v1" schemaLocation="common.xsd" />
	<!-- -->
	<xs:element name="material" type="materialType">
		<xs:annotation>
			<xs:documentation>Root element for material object. Material </xs:documentation>
		</xs:annotation>
	</xs:element>
	<!-- -->
	<xs:complexType name="materialType">
		<xs:sequence>
			<!-- Redundant as it already exists in api-messages-common:messageHeaderType on every message.
			<xs:element name="providerId" type="common:idType">
				<xs:annotation>
					<xs:documentation>
						Id for the provider of the material.
						Not the
						Could be for example 'cmore', 'mtv' or 'se.tv4'
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			-->
			<xs:element name="id" type="common:idType">
				<xs:annotation>
					<xs:documentation>
						A unique id for material, should include providerId (located in api-messages-common) e.g. 'se.tv4.UUID' or 'mtv.UUID'
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="materialType" type="materialTypeType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The type of material.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="distributor" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Name of the distributor of the material, e.g. "Nordic Film Distribution".
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="contentIdRef" type="common:idType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						No use at the moment but could be used for clips or such at a later date.
						If we would start to send clips from louise or metabank that are not scheduled in louise, we would have material for the clip (videoformat, resolution etc) but we would not have an event to connect the material to.
						So we need this element to connect the clip (or ad, or something else that does not have a scheduled event) to a content.

						Say we have highlights from a UFC fight or an Idol episode, we have (at least) two usecases:
						1: It is a clip from a recent episode that we want to use to promote watching of the episode on our VOD platform.
						In this case we could reference the scheduled event instead of the content, however..

						2: If it is an old clip from a publication event that has expired but we want to use it to promote a new season. Then we need to be able to connect it to a content/season/brand instead as we would not have an event to connect it to.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="videoFormat" type="videoFormatType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>format for video, for example HD
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="mediaList" type="mediaListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available media for this material
					</xs:documentation>
				</xs:annotation>
            </xs:element>

			<xs:element name="audioList" type="audioListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available audio for this material
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="aspectRatio" type="common:aspectRatioType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>aspect ratio for the material</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="subtitleList" type="subtitleListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available subtitles</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="accessibilityList" type="accessibilityListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of available accessibility types
					</xs:documentation>
				</xs:annotation>
			</xs:element>

		</xs:sequence>
		<xs:attribute name="timestamp" type="xs:dateTime" use="required">
			<xs:annotation>
				<xs:documentation>Timestamp when the xml message is created.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="videoFormatType">
		<xs:simpleContent>
			<xs:extension base="videoFormatTypeType">
				<xs:attribute name="threeD" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Sets to true if video is in 3D or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:simpleType name="videoFormatTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="576i" />
			<xs:enumeration value="720p" />
			<xs:enumeration value="1080i" />
			<xs:enumeration value="1080p" />
			<xs:enumeration value="2160p" />
			<xs:enumeration value="other" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="audioListType">
		<xs:sequence>
			<xs:element name="format" type="audioType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						audio format, for example surround
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="audioType">
		<xs:simpleContent>
			<xs:extension base="audioFormatType">
				<xs:attribute name="language" type="xs:language">
					<xs:annotation>
						<xs:documentation>code in ISO 639-1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="materialTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="program" />
			<xs:enumeration value="trailer" />
			<xs:enumeration value="clip" />
			<xs:enumeration value="ad" />
			<xs:enumeration value="other" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="audioFormatType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="mono" />
			<xs:enumeration value="stereo" />
			<xs:enumeration value="surround" />
			<xs:enumeration value="5.1" />
			<xs:enumeration value="other" />
		</xs:restriction>
	</xs:simpleType>

	<!-- Need to add a RFA flag to Subtitles as well? -->
	<xs:complexType name="subtitleListType">
		<xs:sequence>
			<xs:element name="subtitle" type="subtitleType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						reference to a subtitle item, for example a teletext page or a subtitle file
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="subtitleType">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="language" type="xs:language">
					<xs:annotation>
						<xs:documentation>code in ISO 639-1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="format" type="subtitleFormatType" />
				<xs:attribute name="rfa" type="xs:boolean"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="subtitleFormatType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="closed" />
			<!-- text-tv text -->
			<xs:enumeration value="open" />
			<xs:enumeration value="openAndTeletext" />
			<xs:enumeration value="teletext" />
			<xs:enumeration value="dvbText" />
			<xs:enumeration value="other" />
			<xs:enumeration value="N/A" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="accessibilityListType">
		<xs:sequence>
			<xs:element name="accessibilityList" type="accessibilityType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
						reference to a accessibility item, for example a hearing impaired subtitle
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="accessibilityType">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="language" type="xs:language">
					<xs:annotation>
						<xs:documentation>code in ISO 639-1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="format" type="accessibilityFormatType" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="accessibilityFormatType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="hearingImpairedSubtitle" /><!-- not used by TV4 -->
			<xs:enumeration value="signLanguageInterpretation" />
			<xs:enumeration value="audioDescription" />
			<xs:enumeration value="spokenSubtitle" /><!-- not used by TV4 -->
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="mediaListType">
		<xs:sequence>
			<xs:element name="media" type="mediaType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="materialReferenceTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="video" />
			<xs:enumeration value="audio" />
			<xs:enumeration value="subtitle" />
			<xs:enumeration value="graphics" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="mediaType">
		<xs:sequence>
			<xs:element name="mediaRef" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						url string value is an id, uri, url file path or any other reference to the media file.
						Depends on the context.
						E.g. for Tv4 this mostly is a filename named "PGMxxxxx", but for Cmore this could be the path to a specific videofile on a FTP-server.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="type" type="materialTypeType">
				<xs:annotation>
					<xs:documentation>
						Type of material, for example video or audio.
						This is currently always set to "program" as no other media will be sent from louise
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="duration" type="timecodeType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The duration of the material in frames.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="bitrate" minOccurs="0">
				<xs:annotation>
					<xs:documentation>If applicable, bitrate for the material in bps
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int" />
				</xs:simpleType>
			</xs:element>

			<xs:element name="framerate" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						If applicable, framerate for the material in fps
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int" />
				</xs:simpleType>
			</xs:element>

			<xs:element name="in" type="timecodeType">
				<xs:annotation>
					<xs:documentation>
						Number of frames from where the mediasegment starts in the referenced file/tape.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="out" type="timecodeType">
				<xs:annotation>
					<xs:documentation>
						Number of frames from where the mediasegment ends in the referenced file/tape.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="use" type="xs:string">
				<xs:annotation>
					<xs:documentation>
						A string, usually an "A" follwed by a number e.g. A1, A2, etc.
						If there are several mediarefs in a publish with different mediaIds this decides their order according to the number after the letter.

						Example:
						Say that we have a medialist with three media where two of the three have the same mediaRef but the third differs.
						The two with the same mediaRef will then also have the same use element, in this case "A1".
						The third media that have a different mediaRef will have a different use element, "A2".
						This means that the media with use "A1" should be used before the media with "A2" when editing or transcoding the publish.
						The order of the media with the same mediaRef and use is determined by the "in" and "out" elements.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<!--
			<xs:element name="breakType" type="segmentTypeType" minOccurs="0" />
			-->
			<!-- segmentList is not neccesary
			<xs:element name="segmentList" type="segmentListType" />
			-->

			<xs:element name="rfa" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>
						"Ready For Airing": This flag will be set to true if the media has been checked by QC (Quality Control).
						If this flag is not set to true it means that the file is not yet availble.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<!-- segmentList is not neccesary
	<xs:complexType name="segmentListType">
		<xs:sequence>
			<xs:element name="segment" type="segmentType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="segmentType">
		<xs:sequence>
			<xs:element name="in" type="timecodeType" />
			<xs:element name="out" type="timecodeType" />
			<xs:element name="breakType" type="segmentTypeType" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="segmentTypeType">
		<xs:annotation>
			<xs:documentation></xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="mandatory" />
			<xs:enumeration value="planned" />
			<xs:enumeration value="bad" />
		</xs:restriction>
	</xs:simpleType>
	-->

	<xs:simpleType name="timecodeType">
		<xs:annotation>
			<xs:documentation>
				Timecode is set to number of frames to avoid conversion problems.
				Conversion to time should be done when a framrate is known at the endpoint.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:int"/>
	</xs:simpleType>
	<xs:complexType name="rightsListType">
		<xs:sequence>
			<xs:element name="rights" type="materialRightsType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="materialRightsType">
		<xs:annotation>
			<xs:documentation>DateTime in UTC</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="rightsName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Name of right, i e 'Free' or 'Premium'
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="validFrom" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Start of period where right is valid
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="validTo" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>End of period where right is valid
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="rightsCategoryList" type="rightsCategoryListType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>list of right categories</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="rightsCategoryListType">
		<xs:sequence>
			<xs:element name="rightsCategory" type="rightsCategoryType" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="rightsCategoryType">
		<xs:complexContent>
			<xs:extension base="common:rightsType">
				<xs:sequence>
					<xs:element name="deviceRights" type="deviceTypeOutPutRights" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								list of devices affected by the right (Not currently used by the import)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="noLinearTransmission" type="transmissionDeviceTypeRights" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Linear transmision may not be sent to these devices. (Not currently used by the import)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="transmissionDeviceTypeRights">
		<xs:complexContent>
			<xs:extension base="deviceTypeRightsType">
				<xs:annotation>
					<xs:documentation>
						Can be used in example for marking a tv-show in the schedule that isn't allowed to be
						transmitted to mobile clients (Not currently used by the import)
					</xs:documentation>
				</xs:annotation>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deviceTypeOutPutRights">
		<xs:complexContent>
			<xs:extension base="deviceTypeRightsType">
				<xs:sequence>
					<xs:element name="digitalOutputRights" type="digitalOutputRightsType" minOccurs="0">
					</xs:element>
					<xs:element name="analogOutputRights" type="analogOutputRightsType" minOccurs="0">
					</xs:element>
					<xs:element name="inHomeNetworkOutputRights" type="inHomeNetworkOutputRightsType" minOccurs="0">
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deviceTypeRightsType">
		<xs:sequence>
			<xs:element name="deviceType" type="common:deviceTypeType" maxOccurs="unbounded"></xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="digitalOutputRightsType">
		<xs:annotation>
			<xs:documentation>Controls the output source for digital sources
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="unrestricted" />
			<xs:enumeration value="besteffort" />
			<xs:enumeration value="restricted" />
			<xs:enumeration value="disallow" />
			<xs:enumeration value="downresolution" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="analogOutputRightsType">
		<xs:choice>
			<xs:element name="unrestricted" type="xs:boolean"></xs:element>
			<xs:element name="besteffort" type="cgmsaType"></xs:element>
			<xs:element name="restricted" type="cgmsaType"></xs:element>
			<xs:element name="disallow" type="xs:boolean">
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:simpleType name="cgmsaType">
		<xs:annotation>
			<xs:documentation>CGMS-A is standardized through the IEC, CEA, EIA-J and ETS
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="copyfreely" />
			<xs:enumeration value="copynomore" />
			<xs:enumeration value="copyonce" />
			<xs:enumeration value="copynever" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="inHomeNetworkOutputRightsType">
		<xs:annotation>
			<xs:documentation>Controls the output source for network services
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="unrestricted" />
			<xs:enumeration value="disallow" />
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="materialListType">
		<xs:annotation>
			<xs:documentation>
				This is used for better readability in higher nodes.
				I.e instead of having a sequence of materialTypes in the publishType, just add an element with this type.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="material" type="materialType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

</xs:schema>
